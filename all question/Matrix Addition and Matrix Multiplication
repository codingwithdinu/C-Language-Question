Algorithm for Matrix Addition and Matrix Multiplication:
                  Matrix Addition:
1. Input matrices: Read two matrices of the same size from the user (e.g., A[m][n] and B[m][n]).
2. Initialize a result matrix: Create a result matrix C[m][n] to store the sum of corresponding elements from matrices A and B.
3. Add corresponding elements: For each element in the matrices, add the corresponding elements of matrix A and matrix B to get the sum.
4. Output the result: Print the resulting matrix.
                 
                Matrix Multiplication:
1. Input matrices: Read two matrices (matrix A of size m x n and matrix B of size n x p).
2. Initialize a result matrix: Create a result matrix C[m][p] to store the product of the matrices.
3. Multiply matrices: For each element of the result matrix C[i][j], compute the sum of the products of the corresponding elements of row i of matrix A and column j of matrix B.
4. Output the result: Print the resulting matrix.



#include <stdio.h>

int main() {
    int i, j, m, n, p;

    // Input size of first matrix (m x n)
    printf("Enter the number of rows and columns for matrix A (m n): ");
    scanf("%d %d", &m, &n);

    int A[m][n]; // Matrix A
    int B[m][n]; // Matrix B
    int C[m][n]; // Resultant matrix for addition

    // Input elements for matrix A
    printf("Enter elements for matrix A (%d x %d):\n", m, n);
    for (i = 0; i < m; i++) {
        for (j = 0; j < n; j++) {
            scanf("%d", &A[i][j]);
        }
    }

    // Input elements for matrix B
    printf("Enter elements for matrix B (%d x %d):\n", m, n);
    for (i = 0; i < m; i++) {
        for (j = 0; j < n; j++) {
            scanf("%d", &B[i][j]);
        }
    }

    // Matrix Addition
    printf("\nMatrix Addition (A + B):\n");
    for (i = 0; i < m; i++) {
        for (j = 0; j < n; j++) {
            C[i][j] = A[i][j] + B[i][j]; // Add corresponding elements
        }
    }

    // Print Result of Addition
    printf("Resulting matrix C (A + B):\n");
    for (i = 0; i < m; i++) {
        for (j = 0; j < n; j++) {
            printf("%d ", C[i][j]);
        }
        printf("\n");
    }

    // Input size of second matrix for multiplication (n x p)
    printf("\nEnter the number of columns for matrix B for multiplication: ");
    scanf("%d", &p);

    int D[m][p]; // Resultant matrix for multiplication

    // Matrix Multiplication
    printf("\nMatrix Multiplication (A * B):\n");
    for (i = 0; i < m; i++) {
        for (j = 0; j < p; j++) {
            D[i][j] = 0;  // Initialize the result element to 0
            for (int k = 0; k < n; k++) {
                D[i][j] += A[i][k] * B[k][j]; // Multiply and accumulate
            }
        }
    }

    // Print Result of Multiplication
    printf("Resulting matrix D (A * B):\n");
    for (i = 0; i < m; i++) {
        for (j = 0; j < p; j++) {
            printf("%d ", D[i][j]);
        }
        printf("\n");
    }

    return 0;
}
